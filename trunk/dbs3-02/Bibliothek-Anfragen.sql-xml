connect to dbprakU8;

XQUERY
<Ergebnisse>
<Ergebnisse_Query_1>
{
for $autor in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "Vorname", Vorname), XMLELEMENT(name "Name", Name)) AS Autor) FROM Personen P, Autoren A WHERE A.PersonenVerweis = P.ID')
    let $format1 := concat($autor/Vorname/text(), ' ', $autor/Name/text())
    let $format2 := concat($autor/Name/text(), ' ', $autor/Vorname/text())
    let $format3 := concat('[', $autor/Name/text(), ']')
    for $buch in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "ISBN", ISBN), XMLELEMENT(name "Titel", Titel)) AS Buch) FROM Buecher')
        for $abschnitt in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "BuchISBN", BuchISBN), XMLELEMENT(name "Text", Text)) AS Abschnitt) FROM Abschnitte A')
        where $abschnitt/BuchISBN = $buch/ISBN
        return 
            if(contains($abschnitt/Text/text(), $format1)) then <Ergebnis>{$buch/ISBN}{$buch/Titel}<referenzierter_Autor>{$format1}</referenzierter_Autor></Ergebnis>
            else(
                if(contains($abschnitt/Text/text(), $format2)) then <Ergebnis>{$buch/ISBN}{$buch/Titel}<referenzierter_Autor>{$format1}</referenzierter_Autor></Ergebnis>
                else(
                    if(contains($abschnitt/Text/text(), $format3)) then <Ergebnis>{$buch/ISBN}{$buch/Titel}<referenzierter_Autor>{$format1}</referenzierter_Autor></Ergebnis>
                    else()
                    )
                )
}
</Ergebnisse_Query_1>
<Ergebnisse_Query_2>
{
let $exceptions := "der die das dass ein eine und aber sowie Der Die Das Dass Ein Eine Und Aber Sowie"
for $buch1 in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "ISBN", ISBN), XMLELEMENT(name "Titel", Titel)) AS Buch) FROM Buecher')
    for $token in tokenize($buch1/Titel/text(), "[.,()\[\]\{\}\s]+")
        for $buch2 in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "ISBN", ISBN), XMLELEMENT(name "Titel", Titel)) AS Buch) FROM Buecher')
        where $buch2 != $buch1
            return ( 
                if(contains($buch2/Titel/text(), $token)) then <Ergebnis><Verbindung>{$token}</Verbindung><Buch>{$buch1/Titel/text()}</Buch><Buch>{$buch2/Titel/text()}</Buch></Ergebnis>
                else(
                    for $abschnitt2 in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "BuchISBN", BuchISBN), XMLELEMENT(name "Text", Text)) AS Abschnitt) FROM Abschnitte')
                    where $abschnitt2/BuchISBN = $buch2/ISBN
                        return if(contains($abschnitt2/Text/text(), $token)) then <Ergebnis><Verbindung>{$token}</Verbindung><Buch>{$buch1/Titel/text()}</Buch><Buch>{$buch2/Titel/text()}</Buch></Ergebnis> else()
                )
            ) ,
for $buch1 in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "ISBN", ISBN), XMLELEMENT(name "Titel", Titel)) AS Buch) FROM Buecher')
    for $abschnitt1 in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "BuchISBN", BuchISBN), XMLELEMENT(name "Text", Text)) AS Abschnitt) FROM Abschnitte')
    where $abschnitt1/BuchISBN = $buch1/ISBN
        return(
            for $token in tokenize($abschnitt1/Text/text(), "[.,()\[\]\{\}\s]+")
                for $buch2 in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "ISBN", ISBN), XMLELEMENT(name "Titel", Titel)) AS Buch) FROM Buecher')
                where $buch2 != $buch1
                    return (
                        if(contains($buch2/Titel/text(), $token)) then <Ergebnis><Verbindung>{$token}</Verbindung><Buch>{$buch1/Titel/text()}</Buch><Buch>{$buch2/Titel/text()}</Buch></Ergebnis>
                        else (
                            for $abschnitt2 in db2-fn:sqlquery('SELECT XMLFOREST(XMLCONCAT(XMLELEMENT(name "BuchISBN", BuchISBN), XMLELEMENT(name "Text", Text)) AS Abschnitt) FROM Abschnitte')
                            where $abschnitt2/BuchISBN = $buch2/ISBN
                                return if(contains($abschnitt2/Text/text(), $token)) then <Ergebnis><Verbindung>{$token}</Verbindung><Buch>{$buch1/Titel/text()}</Buch><Buch>{$buch2/Titel/text()}</Buch></Ergebnis> else()
                        )
                    )
        )
}
</Ergebnisse_Query_2>
</Ergebnisse> ;

-- Geben Sie die Email-Adressen aller Kunden aus, welche Bücher lesen in denen es mehr als zwei Kapitel mit jeweils mindestens drei Unterkapiteln gibt.
SELECT XMLELEMENT(NAME "Ergebnisse_Query_3",XMLAGG(XMLELEMENT(NAME "E-Mail",p.email))) FROM Leihvorgaenge L,Kunden K,Personen P where L.kundennummer = K.Kundennummer and k.personenverweis = p.id and Buchisbn in
		-- Buecher mit mit mehr als 2 Kapiteln und jeweils min. 3 Unterkapiteln
		(
			select buchisbn from abschnitte a1 where typ = 'Kapitel' and (
				-- fuer jedes Kapitel eines Buches wird Anzahl der Unterkapitel ermittelt 
				select count(*) from abschnitte a2 where a2.buchisbn = a1.buchisbn and a2.parentid = a1.abschnittid and typ='Unterkapitel'
			) > 2 and (
				-- Anzahl der Buchkapitel
				select count(*) from abschnitte a3 where a1.buchisbn = a3.buchisbn and a3.typ='Kapitel'
			) > 2
		)
;

-- Geben Sie die Anzahl der Kunden für alle Bücher aus, wobei die Kunden das Buch lesen und das Buch zwei Kapitel mit jeweils null oder zwei Unterkapiteln besitzt.
-- alle Buecher und die Anzahl von Ausleihungen
select XMLELEMENT(NAME "Ergebnisse_Query_4",
	XMLAGG(
		XMLELEMENT(NAME "Buch",
		XMLCONCAT(
			XMLELEMENT(NAME "ISBN",ISBN),
			XMLELEMENT(NAME "Titel",Titel),
			XMLELEMENT(NAME "Erscheinungsjahr",Erscheinungsjahr),
			XMLELEMENT(NAME "Kundenanzahl",(case when isbn = Buchisbn then anzahl else 0 end))
		))
	)
)  from buecher,
	-- ausgeliehene Buecher und deren Anzahl
	(
		SELECT Buchisbn, count(kundennummer) as anzahl FROM Leihvorgaenge where Buchisbn in 
		-- Buch zwei Kapitel mit jeweils null oder zwei Unterkapiteln
		(
			-- Buecher mit mit 2 Kapiteln
			(Select buchisbn from Abschnitte where typ = 'Kapitel' group by buchisbn,typ having count(typ) = 2) intersect
			-- Kapitel mit 2 oder 0 Unterkapiteln
			(
				(SELECT buchisbn from Abschnitte where typ = 'Unterkapitel' group by buchisbn, parentid having count(typ) = 2) Union
				(SELECT buchisbn from Abschnitte where typ <> 'Unterkapitel' group by buchisbn except SELECT buchisbn from Abschnitte where typ = 'Unterkapitel' group by buchisbn)
			)
		) 
		group by Buchisbn,Kundennummer
	) as ausleihe;
